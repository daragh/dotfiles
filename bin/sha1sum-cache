#!/usr/bin/env python

import sys, os, re, tempfile, hashlib


def sha1sum(path):
    sha1 = hashlib.sha1()
    with open(path, 'rb') as f:
        [sha1.update(c) for c in iter(lambda: f.read(32768), b'')]
    return sha1.hexdigest()


def string_sha1(string):
    sha1 = hashlib.sha1()
    sha1.update(string)
    return sha1.hexdigest()


def file_paths(path):
    def no_dots(paths):
        return [path for path in paths if not path.startswith('.')]
    for (root, dirnames, filenames) in os.walk(path):
        dirnames[:] = no_dots(dirnames)
        filenames[:] = no_dots(filenames)
        for filename in filenames:
            yield os.path.normpath(os.path.abspath(os.path.join(root, filename)))


def sha1sum_string(sha1, path):
    return '%s  %s' % (sha1, path)


def hash_file(path):
    tempdir = tempfile.gettempdir()
    cache_path = os.path.join(tempdir, string_sha1(path))
    if not os.path.exists(cache_path):
        sha1 = sha1sum(path)
        (fd, temp_path) = tempfile.mkstemp(dir=tempdir)
        f = os.fdopen(fd, 'w')
        f.write(sha1)
        f.close()
        os.rename(temp_path, cache_path)
    with open(cache_path, 'r') as f:
        return f.read()


def hash_directory(directory):
    return (
        sha1sum_string(hash_file(path), os.path.relpath(path, directory))
        for path in file_paths(directory))


def main():
    directories = sys.argv[1:]
    for directory in directories:
        directory = os.path.normpath(os.path.abspath(directory))
        manifest_path = os.path.join(
            directory,
            ''.join([os.path.basename(directory), '.sha1']))
        temp_path = os.path.join(
            os.path.dirname(manifest_path),
            ''.join(['.', os.path.basename(manifest_path), '.tmp']))
        lines = []
        for line in hash_directory(directory):
            print line
            lines.append(line)
        with open(temp_path, 'w') as f:
            f.write('\n'.join(sorted(lines, key=lambda x: x.split()[1:])))
        os.rename(temp_path, manifest_path)


if __name__ == '__main__':
    main()
