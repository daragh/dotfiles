#!/usr/bin/env python

import sys
import os
from os.path import normpath, abspath, exists, relpath, dirname, basename
from itertools import tee, izip
from tempfile import gettempdir, mkstemp
import hashlib
from StringIO import StringIO
from contextlib import contextmanager
from multiprocessing import Pool


@contextmanager
def temporary_file():
    (fd, temp_path) = mkstemp(dir=gettempdir())
    f = os.fdopen(fd, 'w')
    yield (f, temp_path)
    f.close()


def sha1sum(f):
    sha1 = hashlib.sha1()
    [sha1.update(c) for c in iter(lambda: f.read(1024 * 1024), b'')]
    return sha1.hexdigest()


def file_paths(path):
    def no_dots(paths):
        return [path for path in paths if not path.startswith('.')]
    for (root, dirnames, filenames) in os.walk(path):
        dirnames[:] = no_dots(dirnames)
        filenames = no_dots(filenames)
        full_path = lambda x: normpath(abspath(os.path.join(root, x)))
        filepaths = (full_path(filename) for filename in filenames)
        filepaths = (path for path in filepaths if not os.path.islink(path))
        for path in filepaths:
            yield path


def hash_file(path):
    path_sha1 = sha1sum(StringIO(path))
    cache_path = os.path.join(gettempdir(), path_sha1)
    if not exists(cache_path):
        with open(path) as f:
            sha1 = sha1sum(f)
        with temporary_file() as (f, temp_path):
            f.write(sha1)
        os.rename(temp_path, cache_path)
    with open(cache_path, 'r') as f:
        return f.read()


def hash_directory(directory, pool):
    to_hash, to_zip = tee(file_paths(directory))
    hashes = pool.imap(hash_file, to_hash)
    paths = (relpath(path, directory) for path in to_zip)
    return ('%s  %s' % pair for pair in izip(hashes, paths))


def manifest_path(directory):
    return os.path.join(directory, ''.join([basename(directory), '.sha1']))


def temp_path(path):
    return os.path.join(dirname(path), ''.join(['.', basename(path), '.tmp']))


def main():
    directories = sys.argv[1:]
    directories = (normpath(abspath(directory)) for directory in directories)
    pool = Pool()
    for directory in directories:
        manifest_path_ = manifest_path(directory)
        if os.path.exists(manifest_path_):
            with open(manifest_path_) as f: print f.read()
        else:
            (lines, to_print) = tee(hash_directory(directory, pool))
            for line in to_print: print line
            temp_path_ = temp_path(manifest_path_)
            with open(temp_path_, 'w') as f:
                f.write('\n'.join(sorted(lines, key=lambda x: x.split()[1:])))
            os.rename(temp_path_, manifest_path_)


if __name__ == '__main__':
    main()
